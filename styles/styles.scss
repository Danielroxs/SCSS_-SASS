// Variables

$primary-color: #007bff; // variable global
$font-stack: Arial, Helvetica, sans-serif;
$spacing: 16px;

body {
    background-color: $primary-color;
    font-family: Arial, Helvetica, sans-serif;
}

h1 {
    color: darken($primary-color, 15%);
}

// Variables globales y locales


$primary-color: #3498db; // Variable global

.container {
    $secondary-color: #2ecc71; // Variable local solo dentro de .container
    background-color: $secondary-color;
}

h1 {
    color: $primary-color; // Sigue usando la variable global
}

// Variables con numeros

$base-spacing: 16px;
$double-spacing: $base-spacing * 2;

// Variables con colores

$primary-color: #3498db;
$darker-color: darken($primary-color, 10%);

// Variables con Strings

$font-family: "Helvetica, Arial, sans-serif";

body {
    font-family: $font-family;
}

// Variables con listas

$font-sizes: 12px, 14px, 16px, 18px;
h1 {
    font-size: nth($font-sizes, 3); // usa la tercera variable de la lista
}

// Variables usando mapas

$theme-colors: (
    "primary": #3498db,
    "secondary": #2ecc71,
    "tertiary": #e74c3c
);

button {
    background-color: map-get($theme-colors, "primary");
}

// Variables con Booleanos, para usar en condicionales

$is-dark-theme: true;

body {
    @if $is-dark-theme {
        background-color: #333;
        color: white;
    } @else {
        background-color: white;
        color: black;
    }
}


/* Buenas prácticas en el uso de variables Organización lógica de variables: Agrupar las variables según su propósito es una buena práctica. Puedes organizar variables para colores,
tipografía,
espaciado,
etc.,
lo que facilita la mantenibilidad y escalabilidad de los estilos. */

// variables/_colors.scss
$primary-color: #3498db;
$secondary-color: #2ecc71;
$danger-color: #e74c3c;

// variables/_typography.scss
$font-size-base: 16px;
$font-family-base: "Arial, sans-serif";

// Luego, en tu archivo principal, importa las variables y usalas
// @import "variables/colors";
// @import "variables/typography";

body {
    background-color: $primary-color;
    font-family: $font-family-base;
    font-size: $font-size-base;
}







// ---------------------------------------------------------------------------------


// Nesting(anidacion de selectores)

/* Anidación de selectores CSS La anidación de selectores permite escribir el código CSS de una forma más concisa y clara, evitando la repetición innecesaria de selectores. En lugar de escribir selectores completos repetidamente,
puedes anidarlos dentro del selector principal. */

nav {
    background-color: #333;

    ul {
        list-style: none;
        margin: 0;
        padding: 0;

        li {
            display: inline-block;

            a {
                text-decoration: none;
                color: white;

                &:hover {
                    color: #3498db;
                }
            }
        }
    }
}

// Resultado en css

nav {
    background-color: #333;
}

nav ul {
    list-style: none;
    margin: 0;
    padding: 0;
}

nav ul li {
    display: inline-block;
}

nav ul li a {
    text-decoration: none;
    color: white;
}

nav ul li a:hover {
    color: #3498db;
}


// Anidación de propiedades CSS

button {
    font: {
        family: "Arial, sans-serif";
        size: 16px;
        weight: bold;
    }

    margin: {
        top: 10px;
        bottom: 20px;
    }
}

// Resultado en CSS

button {
    font-family: "Arial, sans-serif";
    font-size: 16px;
    font-weight: bold;
    margin-top: 10px;
    margin-bottom: 20px;
}

// ---------------------------------------------------------------------------------

// Partials y @import en SCSS

/* El uso de partiales y la directiva @import son fundamentales en SCSS para modularizar y organizar de manera eficiente los estilos en proyectos grandes. Vamos a explorar cómo crear y usar archivos parciales, cómo organizar el código y la transición a @use y @forward en la versión moderna de SASS. */

// Creando un archivo parcial

// variables/_colors.scss
$primary-color: #3498db;
$secondary-color: #2ecc71;
$danger-color: #e74c3c;

// variables/_typography.scss
$font-size-base: 16px;
$font-family-base: "Arial, sans-serif";

// Luego, en tu archivo principal, importa las variables y usalas
// @import "variables/colors";
// @import "variables/typography";

body {
    background-color: $primary-color;
    font-family: $font-family-base;
    font-size: $font-size-base;
}

/scss |_ _variables.scss // Variables globales
|_ _mixins.scss // Mixins
|_ _base.scss // Estilos generales
|_ _buttons.scss // Componente de botones
|_ _layout.scss // Estructura de diseño
|_ main.scss // Archivo principal que importa todos los parciales

// Migración de @import a @use y @forward (SASS moderno)

//1 _variables.scss
//$primary-color: #3498db;
//$secondary-color: #2ecc71;

//2 En el archivo principal
// main.scss
// @use 'variables';

// Ejemplo de @forward:

// _colors.scss
//$primary-color: #3498db;
//$secondary-color: #2ecc71;

//@forward 'colors';

// Luego,puedes usar @use para importar y utilizar los valores expuestos:

// main.scss
/* @use 'colors';

button {
    background-color: colors.$primary-color;
} */


body {
    background-color: variables.$primary-color;
}

// ---------------------------------------------------------------------------------

// Mixins
@mixin centrado {
    display: flex;
    justify-content: center;
    align-items: center;
}

.caja {
    @include centrado;
    width: 100px;
    height: 100px;
    background-color: red; 
}

// Mixins con parámetros

@mixin bordes($ancho, $color) {
    border: $ancho solid $color;
}

.boton {
    @include bordes(2px, blue);
}

.contenedor {
    @include bordes(4px, green);
}

// Uso de @include para reutilizar estilos
@mixin sombra($sombra) {
    box-shadow: $sombra;
}

.card {
    @include sombra(0px 4px 5px rgba(0, 0, 0, 0.3));
}

// Mixins condicionales
@mixin tamañoFuente($size) {
    @if $size == 'grande' {
        font-size: 20px;
    } @else if $size == 'mediano' {
        font-size: 16px;
    } @else {
        font-size: 12px;
    }
}

.texto {
    @include tamañoFuente('grande');
}

// ---------------------------------------------------------------------------------

// Funciones
@function doble($valor) {
    @return $valor * 2;
}

.caja {
    width: doble(10px); // devuelve 20px
}

/* Diferencia clave: Mixins generan bloques completos de CSS que se pueden incluir en diferentes selectores. Funciones devuelven valores individuales que se pueden usar dentro de las reglas CSS. */

@function multiplicar($valor, $factor) {
    @return $valor * $factor;
}

.caja {
    width: multiplicar(10px, 2); // devuelve 20px
}

/* Funciones matemáticas: abs(): Devuelve el valor absoluto. min() y max(): Devuelve el mínimo o máximo valor de una lista de números. percentage(): Convierte un valor en una fracción a un porcentaje. */

.caja {
    width: percentage(0.5); // devuelve 50%
}

/* Funciones de color: lighten(): Aclara un color. darken(): Oscurece un color. adjust-hue(): Ajusta el tono de un color. */

.boton {
    background-color: lighten(#3498db, 20%); // aclara el color un 20%
}

/* Funciones de color: lighten(): Aclara un color. darken(): Oscurece un color. adjust-hue(): Ajusta el tono de un color. */

$colores: red, green, blue;

.color {
    background-color: nth($colores, 2); // Devuelve green
}

// Funcion personalizada

@function calcular-espacio($ancho-contenedor, $elementos) {
    @return $ancho-contenedor / $elementos;
}

.lista {
    width: calcular-espacio(1000px, 4 ); // Cada elemento ocupa 25% del ancho del contenedor
}

// ---------------------------------------------------------------------------------

// Extends y Placeholder Selectors en Sass

/* Uso de @extend para heredar estilos La directiva @extend en Sass se utiliza para compartir estilos entre selectores, permitiendo que uno herede las reglas de otro sin necesidad de duplicar código. Cuando un selector extiende a otro, Sass combina ambos selectores en el CSS final. */

.boton {
    padding: 10px;
    border-radius: 5px;
}

.boton-verde {
    @extend .boton;
    background-color: green;
}

.boton-rojo {
    @extend .boton;
    background-color: red;
}

// Placeholder Selectors
%boton-base {
    padding: 10px;
    border-radius: 5px;
}

.boton-verde {
    @extend %boton-base;
    background-color: green;
}

.boton-rojo {
    @extend %boton-base;
    background-color: red;
}

// ---------------------------------------------------------------------------------

// Control de Flujo: Condicionales y Bucles en Sass

/* En Sass,
al igual que en muchos lenguajes de programación,
puedes usar control de flujo para escribir código CSS de manera más eficiente. Esto incluye condicionales y bucles,
que permiten generar estilos de manera dinámica y repetitiva. */

@mixin tamañoTexto($tamaño) {
    @if $tamaño == 'grande' {
        font-size: 20px;
    } @else if $tamaño == 'mediano' {
        font-size: 16px;
    } @else {
        font-size: 12px;
    }
}

.texto {
    @include tamañoTexto('grande');
}

// Bucles FOR en Sass

@for $i from 1 through 5 {
    .columna-#{$i} {
        width: 20% *$i;
    }
}

// Resultado en CSS

.columna-1 {
    width: 20%;
}

.columna-2 {
    width: 40%;
}

.columna-3 {
    width: 60%;
}

.columna-4 {
    width: 80%;
}

.columna-5 {
    width: 100%;
}

// Bucle @each en Sass

$colores: rojo, verde, azul;

@each $color in $colores {
    .boton-#{$color} {
        background-color: $color
    }
}

// Resultado en CSS

.boton-rojo {
    background-color: rojo;
}

.boton-verde {
    background-color: verde;
}

.boton-azul {
    background-color: azul;
}

// Bucle WHILE en Sass

$i:1;

@while $i < 4 {
    .caja-#{$i} {
        width: 100px * $i;
    }
    $i: $i + 1;
}

// Resultado en CSS

.caja-1 {
    width: 100px;
}

.caja-2 {
    width: 200px;
}

.caja-3 {
    width: 300px;
}

// Generacion dinamica de clases y reglas CSS

$ancho-contenedores: 100px, 200px, 300px;

@each $ancho in $ancho-contenedores {
    .contenedor-#{$ancho} {
        width: $ancho;
    }
}

// Resultado en CSS

.contenedor-100px {
    width: 100px;
}

.contenedor-200px {
    width: 200px;
}

.contenedor-300px {
    width: 300px;
}

// ---------------------------------------------------------------------------------

// Mapas y Listas en Sass

/* 9. Mapas y Listas en Sass En Sass,
listas y mapas son tipos de datos útiles para manejar colecciones de valores y pares de clave-valor,
respectivamente. Ambas estructuras permiten organizar y manipular datos de forma eficiente,
facilitando la generación dinámica de estilos en CSS. Uso de listas en Sass Las listas en Sass son colecciones de valores ordenados,
que puedes usar para almacenar múltiples valores en una sola variable. Los elementos de una lista están separados por comas o espacios. */

//@each
$colores: red, green,blue;

@each $color in $colores {
    .texto-#{$color} {
        color: $color;
    }
}

// Resultado en CSS

.texto-red {
    color: red;
}

.texto-green {
    color: green;
}

.texto-blue {
    color: blue;
}

// Mapas en Sass

$colores: (
    primary: blue,
    secondary: green,
    accent: red
);

// Puedes acceder a los valores de un mapa usando la función map-get($map, $key).

.boton-primario {
    background-color: map-get($colores, primary);
}

// Resultado en CSS

.boton-primario {
    background-color: blue;
}

/* Métodos y funciones para manipular listas y mapas en Sass 
Funciones para listas: 

length($list): Devuelve el número de elementos en una lista. 
nth($list, $n): Devuelve el enésimo elemento de la lista (índice 1). 
join($list1, $list2, $separator): Une dos listas. 
append($list, $value, $separator): Añade un valor al final de una lista. 
index($list, $value): Devuelve el índice de un valor en la lista. */

$colores: red, green, blue;
$nuevoColor: yellow;

/* .paleta {
    color1: nth($colores, 1); // devuelve red
    colores-total: length($colores); // devuelve 3
    colores-actualizados: join($colores, $nuevoColor, ', '); // devuelve red, green, blue, yellow
} */

// Funciones para mapas

//map-get($map, $key): Devuelve el valor asociado a una clave en un mapa.
//map-has-key($map, $key): Devuelve true si la clave existe en el mapa, false en caso contrario.
//map-keys($map): Devuelve una lista de claves del mapa.
//map-values($map): Devuelve una lista de valores del mapa.
//map-merge($map1, $map2): Combina dos mapas.
//map-remove($map, $key): Elimina una clave del mapa.

$colores: (
    primary: blue,
    secondary: green,
);

// Agregar un nuevo valor al mapa
$colores-actualizado: map-merge($colores, (accent: red));

// Acceder a una clave específica
.boton {
    background-color: map-get($colores-actualizado, accent); // devuelve red
}

// Resultado en CSS

.boton {
    background-color: red;
}

// ---------------------------------------------------------------------------------

// @use y @forward en Sass (Sass moderno)

/* Reemplazo de @import por @use para evitar la sobrecarga global La directiva @import solía incluir todos los estilos de un archivo en el ámbito global, lo que podría causar conflictos de nombres y problemas de rendimiento. Con @use, cada módulo se carga solo una vez y sus variables, mixins y funciones no están en el ámbito global por defecto. */

// archivo _variables.scss
$primario: blue;
$secundario: green;

// archivo main.scss
@use 'variables';

.boton {
    color: variables.$primario;
}

//@forward

// archivo _variables.scss
$primario: blue;
$secundario: green;

// archivo _base.scss
@forward 'variables';

// archivo main.scss
@use 'base';

.boton {
    color: base.$primario;
}

// Control de acceso a variables y mixins con @use (aliasing)

/* El aliasing permite renombrar un módulo al importarlo,
usando @use con el operador as, lo cual es útil cuando se trabaja con múltiples módulos que pueden tener nombres similares o largos. */

// archivo _colores.scss
$primario: blue;

// archivo main.scss
@use 'colores' as c;

.boton {
    color: c.$primario; // Utiliza el alias 'c' para acceder a $primario
}

// Control de acceso a variables y mixins con @use (aliasing)

// archivo _variables.scss
$primario: blue;
$secundario: green;

// archivo _base.scss
@forward 'variables' show $primario; // Solo expone $primario

// archivo main.scss
@use 'base';

.boton {
    color: base.$primario; // Acceso permitido
    // color: base.$secundario; // Esto generará un error
}

// ---------------------------------------------------------------------------------

// Funciones Predefinidas en Sass

/* Sass incluye un conjunto de funciones predefinidas que simplifican la manipulación de colores,
números y cadenas de texto. Estas funciones permiten realizar operaciones avanzadas directamente en Sass,
haciendo el código más dinámico y manteniendo la consistencia de estilos en toda la hoja de estilos. */

// Funciones de color

// darken($color, $amount):

// Oscurece un color en un porcentaje específico.
// Ejemplo: darken(#3498db, 20%) devuelve un tono más oscuro de azul.
// lighten($color, $amount):

// Aclara un color en un porcentaje específico.
// Ejemplo: lighten(#3498db, 20%) devuelve un tono más claro de azul.
// mix($color1, $color2, $weight):

// Mezcla dos colores con un peso específico.
// Ejemplo: mix(red, blue, 50%) mezcla rojo y azul a partes iguales.
// adjust-hue($color, $degrees):

// Cambia el tono de un color en un número de grados específicos.
// Ejemplo: adjust-hue(#3498db, 45deg) ajusta el tono de azul en 45 grados.
// saturate($color, $amount) y desaturate($color, $amount):

// Aumenta o reduce la saturación de un color.
// Ejemplo: saturate(#3498db, 20%) incrementa la saturación.
// rgba($color, $alpha):

// Agrega un nivel de transparencia a un color.
// Ejemplo: rgba(#3498db, 0.5) genera un color azul semitransparente.

// Funciones matemáticas y de manipulación

// math.div($numerator, $denominator):

// Divide dos números. En Sass moderno, se recomienda math.div en lugar de / para evitar ambigüedades.
// Ejemplo: math.div(10px, 2) devuelve 5px.
// math.ceil($number) y math.floor($number):

// ceil redondea el número al entero superior, mientras que floor redondea al entero inferior.
// Ejemplo: math.ceil(4.2) devuelve 5, y math.floor(4.8) devuelve 4.
// math.round($number):

// Redondea un número al entero más cercano.
// Ejemplo: math.round(4.5) devuelve 5.
// percentage($number):

// Convierte un número en fracción a un porcentaje.
// Ejemplo: percentage(0.5) devuelve 50%.

// Funciones de Cadena

// quote($string) y unquote($string):

// quote rodea una cadena con comillas; unquote elimina las comillas de una cadena.
// Ejemplo: quote(hello) devuelve "hello", y unquote("hello") devuelve hello.
// str-length($string):

// Devuelve el número de caracteres en una cadena.
// Ejemplo: str-length("hello") devuelve 5.
// str-insert($string, $insert, $index):

// Inserta una subcadena en una posición específica de la cadena original.
// Ejemplo: str-insert("hello", " world", 6) devuelve "hello world".
// str-slice($string, $start-at, $end-at):

// Corta una subcadena desde una posición inicial hasta una posición final.
// Ejemplo: str-slice("hello", 1, 3) devuelve "hel".
// to-upper-case($string) y to-lower-case($string):

// Convierte una cadena a mayúsculas o minúsculas.
// Ejemplo: to-upper-case("hello") devuelve "HELLO".

// ---------------------------------------------------------------------------------

// Modularizacion y Arquitectura en Sass

/* Para proyectos grandes,
es común organizar el código en una estructura de carpetas para mantener una separación lógica y facilitar el mantenimiento. Una estructura típica incluye: */

// base/:

// Contiene estilos globales y resets, como normalize.css o estilos básicos (_reset.scss, _typography.scss).
// components/:

// Archivos que representan componentes reutilizables (_button.scss, _card.scss).
// layout/:

// Define la estructura general del sitio, como la cuadrícula (_grid.scss), encabezados, pies de página y contenedores // (_header.scss, _footer.scss).
// themes/:

// Archivos de configuración para temas, si el proyecto soporta varios (_dark-theme.scss, _light-theme.scss).
// utils/ o abstracts/:

// Funciones, mixins, variables y mapas (_variables.scss, _mixins.scss).
// main.scss:

// Archivo principal que importa todos los módulos. Este archivo se compila en el archivo CSS final.


/* sass/
├── base/
│   ├── _reset.scss
│   └── _typography.scss
├── components/
│   ├── _button.scss
│   └── _card.scss
├── layout/
│   ├── _grid.scss
│   ├── _header.scss
│   └── _footer.scss
├── themes/
│   ├── _dark-theme.scss
│   └── _light-theme.scss
├── utils/
│   ├── _variables.scss
│   ├── _mixins.scss
│   └── _functions.scss
└── main.scss
 */

// BEM en Sass

.button {
    &__icon {
        margin-right: 5px;
    }

    &--primary {
        background-color: blue;
    }
}

// Resultado en CSS

.button__icon {
    margin-right: 5px;
}

.button--primary {
    background-color: blue;
}

// ---------------------------------------------------------------------------------
// Compilar y minificar CSS con Dart Sass

/* Dart Sass es un compilador de Sass que se ejecuta en el navegador, lo que permite compilar y minificar CSS en tiempo de ejecución. Dart Sass es una alternativa a otros compiladores de Sass, como LibSass y Node Sass, y es compatible con Sass moderno. Dart Sass se ejecuta en el navegador y no requiere instalación en el sistema. Además, Dart Sass es muy rápido y eficiente, lo que lo hace ideal para proyectos de alto rendimiento. */

// Instalación

// 1. Instalar Dart Sass en tu sistema
// 2. Agregar Dart Sass a tu proyecto
// 3. Compilar y minificar tus archivos Sass

// Agregar Dart Sass a tu proyecto

/* Para agregar Dart Sass a tu proyecto, debes instalarlo en tu sistema y configurarlo en tu archivo de configuración Sass. Puedes hacerlo de varias maneras, como instalarlo globalmente o localmente, configurarlo para usarlo con una herramienta específica, o configurarlo para usarlo con un compilador específico. Aquí te mostramos cómo configurar Dart Sass para usarlo con Gulp. */

// Instalación global

npm install -g dart-sass

// Instalación local

npm install --save-dev dart-sass

// Configuración en Gulp

/* const sass = require('gulp-sass')(require('sass'));

gulp.task('sass', function () {
    return gulp.src('src/styles/*.scss')
        .pipe(sass().on('error', sass.logError))
        .pipe(gulp.dest('dist/css'));
}); */

// ---------------------------------------------------------------------------------

// Compilacion eficiente de SASS(evitar duplicacion de código)
%boton-base {
    padding: 10px;
    border-radius: 5px;
}

.boton-primario {
    @extend %boton-base;
    background-color: blue;
}

.boton-secundario {
    @extend %boton-base;
    background-color: green;
}

// ---------------------------------------------------------------------------------

// Herramientas de Post-Procesado CSS (PostCSS, Autoprefixer)

// Configuracion basica de PostCSS con Autoprefixer en un archivo postcss.config.js
/* module.exports = {
    plugins: [
        require('autoprefixer')
    ]
}; */

/* Ejecutar npx postcss output.css --use autoprefixer -o final.css aplicará los prefijos necesarios y generará el archivo final.css. */

// ---------------------------------------------------------------------------------



// Anidacion de selectores

nav {
    background-color: #333;

            ul {
                list-style-type: none;
                margin: 0;
                padding: 0;
                text-align: center;

                li {
                    display: inline-block;

                    a {
                        text-decoration: none;
                        color: white;
                        padding: $spacing;

                        &:hover {
                            background-color: lighten(#333, 10%);
                        }
                    }
                }
            
            }
        }

// Mixins

// creando un mixin para el diseño de caja
@Mixin box($width, $height) {
    width: $width;
    height: $height;
    display: flex;
    alignt-items: center;
    justify-content: center;
    border: 1px solid #ccc;
}

// usando el mixin
.container {
    @include box(150px, 50px);
    background-color: #f5f5f5;
}

.button {
    @include box(150px, 50px);
    background-color: #3498db;
    color: white;
}

// Extend y herencia

// Estilo base
.btn {
    padding: 10px 20px;
    border-radius: 5px;
    color: white;
    background-color: #3498db;
}

// heredando el estilo base
.btn-primary {
    @extend .btn;
    background-color: #2ecc71;
}

.btn-danger {
    @extend .btn;
    background-color: #e74c3c;
}

//Etructura modular usando parciales y @import

